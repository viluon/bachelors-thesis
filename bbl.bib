@article{emp-study-laziness-r,
	author = {Goel, Aviral and Vitek, Jan},
	title = {On the Design, Implementation, and Use of Laziness in R},
	year = {2019},
	issue_date = {October 2019},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {3},
	number = {OOPSLA},
	url = {https://doi.org/10.1145/3360579},
	doi = {10.1145/3360579},
	abstract = {The R programming language has been lazy for over twenty-five years. This paper presents a review of the design and implementation of call-by-need in R, and a data-driven study of how generations of programmers have put laziness to use in their code. We analyze 16,707 packages and observe the creation of 270.9 B promises. Our data suggests that there is little supporting evidence to assert that programmers use laziness to avoid unnecessary computation or to operate over infinite data structures. For the most part R code appears to have been written without reliance on, and in many cases even knowledge of, delayed argument evaluation. The only significant exception is a small number of packages which leverage call-by-need for meta-programming.},
	journal = {Proc. ACM Program. Lang.},
	month = oct,
	articleno = {153},
	numpages = {27},
	keywords = {R language, delayed or lazy evaluation}
}

@ONLINE{gh-hoed,
	description = {Lighweight algorithmic debugging based on observing intermediate values.},
	title = {GitHub - MaartenFaddegon/Hoed: Hoed - A Lightweight Haskell Tracer and Debugger},
	url = {https://github.com/MaartenFaddegon/Hoed},
	urldate = {2021-03-14}
}

